{"version":3,"sources":["createProfile_script.js","formValidationMethods.js","createProfile_validation.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrfile":"createProfile.js","sourcesContent":["/*\n * Profile-related scripts\n */\n\n$(document).ready(function(){\n    /*\n     * Create Profile specific\n     */\n\n    var select_province = function(i){\n        // Dynamically produce select element with options based on provinces\n        var selectElement = '<select name=\"farmAddress['+i+'][province]\">';\n\n        for(var key in provinces){\n            selectElement += '<option value=\"' + key + '\">' + key + '</option>';\n        }\n\n        selectElement += '</select>';\n\n        return selectElement;\n    };\n\n    $('#create-profile #farm-tab').addClass('disabled');\n\n    // Next and previous buttons\n    $('#create-profile #next').click(function(e){\n        e.preventDefault();\n        if($('#farm-tab').hasClass('disabled')) $('#farm-tab').removeClass('disabled');\n        $('ul.tabs').tabs('select_tab','farm-information');\n    });\n\n    $('#create-profile #previous').click(function(e){\n        e.preventDefault();\n        $('ul.tabs').tabs('select_tab','personal-information');\n    });\n\n});\n","'use strict';\n\n// Place error on specific HTML input\nvar placeError = function (inputElement, errorMsg) {\n  // Parse id of element if it contains '-' for the special\n  // case of finding the input's respective\n  // label on editProfile pages\n  var inputId = (inputElement.id.includes('-') && /\\d/.test(inputElement.id))\n    ? (inputElement.id.split('-')[2])\n    : inputElement.id;\n\n  $(inputElement)\n    .parents(\"form\")\n    .find(\"label[for='\" + inputId + \"']\")\n    .attr('data-error', errorMsg);\n\n  setTimeout(function () {\n    if (inputElement.id.includes('select')) {\n      // For select input, find first its respective input text\n      // then add the 'invalid' class\n      $(inputElement)\n        .parents('.select-wrapper')\n        .find('input.select-dropdown')\n        .addClass('invalid');\n    }\n    else $(inputElement).addClass('invalid');\n  }, 0);\n};\n\n// Place success from specific HTML input\nvar placeSuccess = function (inputElement) {\n\n  // For select input, find first its respective input text\n  // then add the needed classes\n  var inputTextFromSelect = (inputElement.id.includes('select')) ? $(inputElement).parents('.select-wrapper').find('input.select-dropdown') : '';\n\n  // Check first if it is invalid\n  if ($(inputElement).hasClass('invalid') || $(inputTextFromSelect).hasClass('invalid')) {\n    $(inputElement)\n      .parents(\"form\")\n      .find(\"label[for='\" + inputElement.id + \"']\")\n      .attr('data-error', false);\n\n    setTimeout(function () {\n      if (inputElement.id.includes('select')) inputTextFromSelect.removeClass('invalid').addClass('valid');\n      else $(inputElement).removeClass('invalid').addClass('valid');\n    }, 0);\n  }\n  else {\n    if (inputElement.id.includes('select')) inputTextFromSelect.addClass('valid');\n    else $(inputElement).addClass('valid');\n  }\n}\n\nvar validationMethods = {\n  // functions must return either true or the errorMsg only\n  required: function (inputElement) {\n    var errorMsg = 'This field is required';\n    return inputElement.value ? true : errorMsg;\n  },\n  requiredIfRadio: function (inputElement, radioId) {\n    var errorMsg = 'This field is required';\n    var radioInputElement = document.getElementById(radioId);\n    if (radioInputElement.checked) return inputElement.value ? true : errorMsg;\n    else return true;\n  },\n  requiredDropdown: function (inputElement) {\n    var errorMsg = 'This field is required';\n    return inputElement.value ? true : errorMsg;\n  },\n  email: function (inputElement) {\n    var errorMsg = 'Please enter a valid email address';\n    return /\\S+@\\S+\\.\\S+/.test(inputElement.value) ? true : errorMsg;\n  },\n  minLength: function (inputElement, min) {\n    var errorMsg = 'Please enter ' + min + ' or more characters';\n    return (inputElement.value.length >= min) ? true : errorMsg;\n  },\n  equalTo: function (inputElement, compareInputElementId) {\n    var errorMsg = 'Please enter the same value';\n    var compareInputElement = document.getElementById(compareInputElementId);\n    return (inputElement.value === compareInputElement.value) ? true : errorMsg;\n  },\n  zipCodePh: function (inputElement) {\n    var errorMsg = 'Please enter zipcode of 4 number characters';\n    return (/\\d{4}/.test(inputElement.value) && inputElement.value.length === 4) ? true : errorMsg;\n  },\n  phoneNumber: function (inputElement) {\n    var errorMsg = 'Please enter 11-digit phone number starting with 09';\n    return (/^09\\d{9}/.test(inputElement.value) && inputElement.value.length === 11) ? true : errorMsg;\n  }\n\n};\n","'use strict';\n\nvar validateFunction = function(){\n\n    return function(){\n        var validateInput = function(inputElement){\n\n            // Extract index from id of input element of farm information\n            // to be used for the computed property\n            // of validations object\n            var index = (inputElement.id.includes('[')) ? inputElement.id.match(/\\d+/)[0]: 1;\n\n            // Initialize needed validations\n            var validations = {\n                officeAddress_addressLine1: ['required'],\n                officeAddress_addressLine2: ['required'],\n                officeAddress_zipCode: ['required', 'zipCodePh'],\n                // landline: ['landline'],\n                office_mobile: ['required', 'phoneNumber'],\n                contactPerson_name: ['required'],\n                contactPerson_mobile: ['required', 'phoneNumber'],\n                ['farmAddress[' + index + '][addressLine1]']: ['required'],\n                ['farmAddress[' + index + '][addressLine2]']: ['required'],\n                ['farmAddress[' + index + '][zipCode]']: ['required', 'zipCodePh'],\n                ['farmAddress[' + index + '][farmType]']: ['required'],\n                ['farmAddress[' + index + '][mobile]']: ['required', 'phoneNumber']\n            };\n\n            // Check if validation rules exist\n            if(validations[inputElement.id]){\n                var result = true;\n\n                for (var i = 0; i < validations[inputElement.id].length; i++) {\n                    var element = validations[inputElement.id][i];\n\n                    // Split arguments if there are any\n                    var method = element.includes(':') ? element.split(':') : element;\n\n                    result = (typeof(method) === 'object')\n                        ? (validationMethods[method[0]](inputElement, method[1]))\n                        : (validationMethods[method](inputElement));\n\n                    // Result would return to a string errorMsg if validation fails\n                    if(result !== true){\n                        placeError(inputElement, result);\n                        return false;\n                    }\n                }\n\n                // If all validations succeed then\n                if(result === true){\n                    placeSuccess(inputElement);\n                    return true;\n                }\n            }\n        };\n\n        // onfocusout events\n        $('body').on('focusout', 'input', function(e){\n            e.preventDefault();\n\n            validateInput(this);\n        });\n\n        // onkeyup events\n        $('body').on('keyup', 'input', function(e){\n            if($(this).hasClass('invalid') || $(this).hasClass('valid')) validateInput(this);\n        });\n\n        $(\"button[type='submit']\").click(function(e){\n            e.preventDefault();\n\n            var officeAddress_addressLine1 = validateInput(document.getElementById('officeAddress_addressLine1'));\n            var officeAddress_addressLine2 = validateInput(document.getElementById('officeAddress_addressLine2'));\n            var officeAddress_zipCode = validateInput(document.getElementById('officeAddress_zipCode'));\n            var office_mobile = validateInput(document.getElementById('office_mobile'));\n            var contactPerson_name = validateInput(document.getElementById('contactPerson_name'));\n            var contactPerson_mobile = validateInput(document.getElementById('contactPerson_mobile'));\n\n            // Count how many current Farm Addresses are available\n            var farmNumber = $(\"#farm-address-body .add-farm\").length+1;\n            var farmValid = true;\n\n            for (var i = 1; i < farmNumber; i++) {\n\n                var farm_addressLine1 = validateInput(document.getElementById('farmAddress[' + i + '][addressLine1]'));\n                var farm_addressLine2 = validateInput(document.getElementById('farmAddress[' + i + '][addressLine2]'));\n                var farm_zipCode = validateInput(document.getElementById('farmAddress[' + i + '][zipCode]'));\n                var farmType = validateInput(document.getElementById('farmAddress[' + i + '][farmType]'));\n                var farm_mobile = validateInput(document.getElementById('farmAddress[' + i + '][mobile]'));\n\n                farmValid = farmValid && farm_addressLine1 && farm_addressLine2 && farm_zipCode && farmType && farm_mobile;\n            }\n\n            // Submit if all validations are met\n            if(officeAddress_addressLine1 && officeAddress_addressLine2 && officeAddress_zipCode && office_mobile\n                && contactPerson_name && contactPerson_mobile && farmValid){\n                $(this).addClass('disabled');\n                $(this).parents('form').submit();\n            }\n            else Materialize.toast('Please properly fill all required fields.', 2500, 'orange accent-2');\n        });\n\n    }\n}\n\n$(document).ready(validateFunction());\n"]}