{"version":3,"sources":["dashboardProductStatus.js"],"names":[],"mappingsfile":"dashboardProductStatus.js","sourcesContent":["'use strict';\n\nVue.component('custom-status-select', {\n    template: '\\\n        <div> \\\n            <select ref=\"select\" :value=\"value\">\\\n                <option value=\"\">All</option> \\\n                <option value=\"requested\">Requested</option> \\\n                <option value=\"reserved\">Reserved</option> \\\n                <option value=\"on_delivery\">On Delivery</option> \\\n                <option value=\"sold\">Sold</option> \\\n            </select> \\\n            <label>Status</label> \\\n        </div> \\\n    ',\n    props:['value'],\n    mounted: function(){\n\n        var self = this;\n        $('select').on('change', function(){\n            self.$emit('status-select',self.$refs.select.value);\n        });\n    }\n\n});\n\nVue.component('custom-date-select', {\n    template: '\\\n        <div class=\"col s12\" style=\"padding:0;\"> \\\n            <input type=\"date\" id=\"delivery-date\" name=\"delivery-date\" class=\"datepicker\" ref=\"select\" :value=\"value\"/> \\\n        </div> \\\n    ',\n    props:['value'],\n    mounted: function(){\n        $('.datepicker').pickadate({\n            min: true,\n            selectMonths: true,\n            selectYears: 2,\n            format: 'mmmm d, yyyy'\n        });\n\n        var self = this;\n        $('#delivery-date').on('change', function(){\n            self.$emit('date-select',self.$refs.select.value);\n        });\n    }\n\n});\n\nVue.component('status-table',{\n    template: '#status-table-template',\n    props: ['products', 'token', 'filterQuery', 'statusFilter'],\n    data: function(){\n        return {\n            sortKey: '',\n            isProductInformationUpActive: '',\n            isProductInformationUpActiveFlag: true,\n            isStatusUpActive: '',\n            isStatusUpActiveFlag: true,\n            sortOrders:{\n                name: 1,\n                status: 1\n            },\n            productRequest:{\n                productId: 0,\n                productName: '',\n                productIndex: 0,\n                type: '',\n                breed: '',\n                customers: []\n            },\n            productReserve:{\n                customerId: 0,\n                customerName: '',\n                swineCartId: 0,\n                requestQuantity: 0\n            },\n            productInfoModal:{\n                productId: 0,\n                reservationId: 0,\n                productName: '',\n                productIndex: 0,\n                customerName: '',\n                deliveryDate: ''\n            },\n            reservationDetails:{\n                productName: '',\n                customerName: '',\n                type: '',\n                breed: '',\n                dateNeeded: '',\n                specialRequest: ''\n            },\n            customerInfo:{\n                name: '',\n                addressLine1: '',\n                addressLine2: '',\n                province: '',\n                mobile: ''\n            }\n        };\n    },\n    computed: {\n        filteredProducts: function(){\n            var self = this;\n            var sortKey = this.sortKey;\n            var statusFilter = this.statusFilter;\n            var filterQuery = this.filterQuery.toLowerCase();\n            var order = this.sortOrders[sortKey];\n            var products = this.products;\n\n            // Check if desired product status exists\n            if(statusFilter){\n                products = products.filter(function(product){\n                    return product.status === statusFilter;\n                });\n            }\n\n            // Check if there is a search query\n            if(filterQuery){\n                products = products.filter(function(product){\n                    return Object.keys(product).some(function (key) {\n                        return String(product[key]).toLowerCase().indexOf(filterQuery) > -1;\n                    });\n                });\n            }\n\n            // Check if desired sort key exists\n            if(sortKey){\n                products = products.sort(function(a,b){\n                    a = a[sortKey];\n                    b = b[sortKey];\n                    return (a === b ? 0 : a > b ? 1 : -1) * order;\n                });\n            }\n\n            return products;\n        }\n    },\n    methods:{\n\n        sortBy: function(key){\n\n            // sort alphabetically according to 'name' of product\n            if (key === 'name') {\n                // reset the color of arrows in Status header if Product Info is clicked\n                this.isStatusUpActive = '';\n                \n                /* this if condition is for the first visit of user \n                 * in which the table rows are not yet sorted, and\n                 * the color of the arrows are still black\n                 */\n                if (this.isProductInformationUpActiveFlag) {\n                    this.isProductInformationUpActiveFlag = false;\n                    this.isProductInformationUpActive = false;\n                }\n\n                // for the switching color of arrow up and down\n                this.isProductInformationUpActive = !this.isProductInformationUpActive\n            }\n            // sort alphabetically according to 'status' of product\n            else if (key === 'status') {\n                /* this if condition is for the first visit of user \n                 * in which the table rows are not yet sorted, and\n                 * the color of the arrows are still black\n                 */\n                if (this.isStatusUpActiveFlag) {\n                    this.isStatusUpActiveFlag = false;\n                    this.isStatusUpActive = false;\n                }\n                // for the switching color of arrow up and down\n                this.isStatusUpActive = !this.isStatusUpActive\n            }\n\n            // Sort table column according to what's chosen\n            this.sortKey = key;\n            this.sortOrders[key] = this.sortOrders[key] * -1;\n        },\n\n        searchProduct : function(uuid){\n            // Return index of productId to find\n            for(var i = 0; i < this.products.length; i++) {\n                if(this.products[i].uuid === uuid) return i;\n            }\n        },\n\n        dateChange: function(value){\n            // Event listener to reflect data change in date select to vue's data\n            this.productInfoModal.deliveryDate = value;\n        },\n\n        getProductRequests: function(uuid, event){\n            var index = this.searchProduct(uuid);\n\n            // Set data values for initializing product-requests-modal\n            this.productRequest.productId = this.products[index].id;\n            this.productRequest.productName = this.products[index].name;\n            this.productRequest.productIndex = index;\n            this.productRequest.type = this.products[index].type;\n            this.productRequest.breed = this.products[index].breed;\n\n            $(event.target).parent().tooltip('remove');\n\n            // Do AJAX\n            this.$http.get(\n                config.dashboard_url+'/product-status/retrieve-product-requests',\n                {\n                    params: { product_id: this.products[index].id }\n                }\n            ).then(\n                function(response){\n\n                    // Store fetched data in local component data\n                    this.productRequest.customers = response.body;\n                    $('#product-requests-modal').modal('open');\n\n                    this.$nextTick(function(){\n                        // Initialize tooltips\n                        $('.tooltipped').tooltip({delay: 50});\n                    });\n                },\n                function(response){\n                    console.log(response.statusText);\n                }\n            );\n\n        },\n\n        confirmReservation: function(index){\n            var requestDetails = this.productRequest.customers[index];\n\n            // Initialize productReserve local data to be\n            // used for the confirmation modal\n            this.productReserve.customerId = requestDetails.customerId;\n            this.productReserve.customerName = requestDetails.customerName;\n            this.productReserve.swineCartId = requestDetails.swineCartId;\n            this.productReserve.requestQuantity = requestDetails.requestQuantity;\n            this.productReserve.dateNeeded = requestDetails.dateNeeded;\n            this.productReserve.specialRequest = requestDetails.specialRequest;\n            $('#reserve-product-confirmation-modal').modal('open');\n        },\n\n        reserveToCustomer: function(event){\n            var reserveButtons = $('.reserve-product-buttons');\n            this.disableButtons(reserveButtons, event.target);\n\n            // Do AJAX\n            this.$http.patch(\n                config.dashboard_url+'/product-status/update-status',\n                {\n                    _token: this.token,\n                    product_id: this.productRequest.productId,\n                    customer_id: this.productReserve.customerId,\n                    swinecart_id: this.productReserve.swineCartId,\n                    request_quantity: this.productReserve.requestQuantity,\n                    date_needed: this.productReserve.dateNeeded,\n                    special_request: this.productReserve.specialRequest,\n                    status: 'reserved'\n                }\n            ).then(\n                function(response){\n                    var responseBody = response.body;\n                    var index = this.productRequest.productIndex;\n\n                    $('#reserve-product-confirmation-modal').modal('close');\n                    $('#product-requests-modal').modal('close');\n\n                    // Update product data (root data) based on the response\n                    // of the AJAX PATCH method\n                    if(responseBody[0] === \"success\"){\n                        if(this.products[index].type !== 'semen'){\n                            var updateDetails = {\n                                'status': 'reserved',\n                                'statusTime': responseBody[5].date,\n                                'index': index,\n                                'type': this.products[index].type,\n                                'reservationId': responseBody[2],\n                                'customerId': this.productReserve.customerId,\n                                'customerName': this.productReserve.customerName\n                            };\n\n                            // Update product list on root data\n                            this.$emit('update-product', updateDetails);\n                        }\n                        else{\n                            var updateDetails = {\n                                'status': 'reserved',\n                                'statusTime': responseBody[5].date,\n                                'uuid': responseBody[3],\n                                'index': index,\n                                'type': this.products[index].type,\n                                'reservationId': responseBody[2],\n                                'quantity': this.productReserve.requestQuantity,\n                                'customerId': this.productReserve.customerId,\n                                'customerName': this.productReserve.customerName,\n                                'dateNeeded': this.productReserve.dateNeeded,\n                                'specialRequest': this.productReserve.specialRequest,\n                                'removeParentProductDisplay': responseBody[4]\n                            };\n\n                            // Update product list on root data\n                            this.$emit('update-product', updateDetails);\n                        }\n\n                    }\n\n                    // Initialize/Update some DOM elements\n                    this.$nextTick(function(){\n                        if(responseBody[0] === \"success\") Materialize.toast(responseBody[1], 2500, 'green lighten-1');\n                        else Materialize.toast(responseBody[1], 2500, 'orange accent-2');\n                        $('.tooltipped').tooltip({delay:50});\n                        this.enableButtons(reserveButtons, event.target);\n                    });\n                },\n                function(response){\n                    console.log(response.statusText);\n                }\n            );\n        },\n\n        setUpConfirmation: function(uuid, status){\n            var index = this.searchProduct(uuid);\n\n            // Initialize productDeliver local data to be\n            // used for the confirmation modal\n            this.productInfoModal.productId = this.products[index].id;\n            this.productInfoModal.reservationId = this.products[index].reservation_id;\n            this.productInfoModal.productName = this.products[index].name;\n            this.productInfoModal.customerName = this.products[index].customer_name;\n            this.productInfoModal.productIndex = index;\n            this.productInfoModal.deliveryDate = (status === 'delivery') ? moment().add(5,'days').format('MMMM DD, YYYY') : '';\n\n            if(status === 'delivery') $('#product-delivery-confirmation-modal').modal('open');\n            else if(status === 'cancel_transaction') $('#cancel-transaction-confirmation-modal').modal('open');\n            else $('#sold-product-confirmation-modal').modal('open');\n        },\n\n        productCancelTransaction: function(event){\n            var cancelTransactionButtons = $('.cancel-transaction-buttons');\n            this.disableButtons(cancelTransactionButtons, event.target);\n\n            // Do AJAX\n            this.$http.patch(\n                config.dashboard_url+'/product-status/update-status',\n                {\n                    _token: this.token,\n                    product_id: this.productInfoModal.productId,\n                    reservation_id: this.productInfoModal.reservationId,\n                    status: 'cancel_transaction'\n                }\n            ).then(\n                function(response){\n                    var responseBody = response.body,\n                        index = this.productInfoModal.productIndex,\n                        customerName = this.productInfoModal.customerName,\n                        productName = this.productInfoModal.productName;\n\n                    $('#cancel-transaction-confirmation-modal').modal('close');\n\n                    // Set status of the product (root data) to 'on_delivery'\n                    // after successful product status change\n                    this.$emit('update-product',\n                        {\n                            'status': 'cancel_transaction',\n                            'index': index\n                        }\n                    );\n\n                    // Initialize/Update some DOM elements\n                    this.$nextTick(function(){\n                        if(responseBody[0] === \"OK\") Materialize.toast('Cancelled transaction on ' + productName, 2500, 'green lighten-1');\n                        else Materialize.toast('Failed status change', 2500, 'orange accent-2');\n                        $('.tooltipped').tooltip({delay:50});\n                        this.enableButtons(cancelTransactionButtons, event.target);\n                    });\n                },\n                function(response){\n                    console.log(response.statusText);\n                }\n            );\n        },\n\n        productOnDelivery: function(event){\n            var deliveryButtons = $('.delivery-product-buttons');\n            this.disableButtons(deliveryButtons, event.target);\n\n            // Do AJAX\n            this.$http.patch(\n                config.dashboard_url+'/product-status/update-status',\n                {\n                    _token: this.token,\n                    product_id: this.productInfoModal.productId,\n                    reservation_id: this.productInfoModal.reservationId,\n                    status: 'on_delivery',\n                    delivery_date: this.productInfoModal.deliveryDate\n                }\n            ).then(\n                function(response){\n                    var responseBody = response.body,\n                        index = this.productInfoModal.productIndex,\n                        customerName = this.productInfoModal.customerName,\n                        productName = this.productInfoModal.productName;\n\n                    $('#product-delivery-confirmation-modal').modal('close');\n\n                    // Set status of the product (root data) to 'on_delivery'\n                    // after successful product status change\n                    this.$emit('update-product',\n                        {\n                            'status': 'on_delivery',\n                            'statusTime': responseBody[1].date,\n                            'deliveryDate': this.productInfoModal.deliveryDate,\n                            'index': index\n                        }\n                    );\n\n                    // Initialize/Update some DOM elements\n                    this.$nextTick(function(){\n                        if(responseBody[0] === \"OK\") Materialize.toast(productName + ' on delivery to ' + customerName , 2500, 'green lighten-1');\n                        else Materialize.toast('Failed status change', 2500, 'orange accent-2');\n                        $('.tooltipped').tooltip({delay:50});\n                        this.enableButtons(deliveryButtons, event.target);\n                    });\n                },\n                function(response){\n                    console.log(response.statusText);\n                }\n            );\n        },\n\n        productOnSold: function(){\n            var soldButtons = $('.sold-product-buttons');\n            this.disableButtons(soldButtons, event.target);\n\n            // Do AJAX\n            this.$http.patch(\n                config.dashboard_url+'/product-status/update-status',\n                {\n                    _token: this.token,\n                    product_id: this.productInfoModal.productId,\n                    reservation_id: this.productInfoModal.reservationId,\n                    status: 'sold'\n                }\n            ).then(\n                function(response){\n                    var responseBody = response.body,\n                        index = this.productInfoModal.productIndex,\n                        customerName = this.productInfoModal.customerName,\n                        productName = this.productInfoModal.productName;\n\n                    $('#sold-product-confirmation-modal').modal('close');\n\n                    // Set status of the product (root data) to 'sold' after\n                    // successful product status change\n                    this.$emit('update-product',\n                        {\n                            'status': 'sold',\n                            'statusTime': responseBody[1].date,\n                            'index': index\n                        }\n                    );\n\n                    // Initialize/Update some DOM elements\n                    this.$nextTick(function(){\n                        if(responseBody[0] === \"OK\") Materialize.toast(productName + ' already sold to ' + customerName , 2500, 'green lighten-1');\n                        else Materialize.toast('Failed status change', 2500, 'orange accent-2');\n                        $('.tooltipped').tooltip({delay:50});\n                        this.enableButtons(soldButtons, event.target);\n                    });\n                },\n                function(response){\n                    console.log(response.statusText);\n                }\n            );\n        },\n\n        showReservationDetails: function(uuid){\n            var index = this.searchProduct(uuid);\n\n            this.reservationDetails.productName = this.products[index].name;\n            this.reservationDetails.customerName = this.products[index].customer_name;\n            this.reservationDetails.type = this.products[index].type;\n            this.reservationDetails.breed = this.products[index].breed;\n            this.reservationDetails.dateNeeded = this.products[index].date_needed;\n            this.reservationDetails.specialRequest = this.products[index].special_request;\n\n            $('#product-reservation-details-modal').modal('open');\n        },\n\n        showCustomerInfo: function(customerId, customerName){\n\n            // Do AJAX\n            this.$http.get(\n                config.dashboard_url+'/customer-info',\n                {\n                    params: { customer_id: customerId }\n                }\n            ).then(\n                function(response){\n\n                    // Store fetched data in local component data\n                    var data = response.body;\n                    this.customerInfo.name = customerName;\n                    this.customerInfo.addressLine1 = data.address_addressLine1;\n                    this.customerInfo.addressLine2 = data.address_addressLine2;\n                    this.customerInfo.province = data.address_province;\n                    this.customerInfo.mobile = data.mobile;\n\n                    $('#customer-info-modal').modal('open');\n\n                },\n                function(response){\n                    console.log(response.statusText);\n                }\n            );\n        },\n\n        disableButtons: function(buttons, actionBtnElement){\n            buttons.addClass('disabled');\n\n            actionBtnElement.innerHTML = '...';\n        },\n\n        enableButtons: function(buttons, actionBtnElement){\n            buttons.removeClass('disabled');\n\n            actionBtnElement.innerHTML = 'Yes';\n        },\n\n    },\n    filters: {\n        capitalize: function(str){\n            if (str) return str[0].toUpperCase() + str.slice(1);\n            else return '';\n        },\n\n        transformDate: function(value){\n            return moment(value).format(\"MMM D YYYY (ddd), h:mmA\");\n        },\n\n        transformToReadableStatus: function(value){\n            return _.startCase(value);\n        }\n    }\n});\n\nvar vm = new Vue({\n    el: '#product-status-container',\n    data:{\n        topic: window.pubsubTopic,\n        searchQuery: '',\n        statusFilter: '',\n        products: rawProducts,\n    },\n    methods:{\n        searchProduct : function(swineCart_id){\n            // Return index of productId to find\n            for(var i = 0; i < this.products.length; i++) {\n                if(this.products[i].id === swineCart_id) return i;\n            }\n        },\n\n        statusChange: function(value){\n            this.statusFilter = value;\n        },\n\n        // Update local product data depending on the status\n        updateProduct: function(updateDetails){\n            // Listener to 'update-product' on status-table component\n\n            switch (updateDetails.status) {\n                case 'reserved':\n                    var index = updateDetails.index;\n\n                    // Just update the product if it is not of type 'semen'\n                    if(updateDetails.type !== 'semen'){\n                        this.products[index].status = 'reserved';\n                        this.products[index].status_time = updateDetails.statusTime;\n                        this.products[index].quantity = 0;\n                        this.products[index].reservation_id = updateDetails.reservationId;\n                        this.products[index].customer_id = updateDetails.customerId;\n                        this.products[index].customer_name = updateDetails.customerName;\n                    }\n\n                    // Add another entry to the product list if of type 'semen'\n                    else{\n                        var baseProduct = this.products[index];\n\n                        this.products.push(\n                            {\n                                'uuid': updateDetails.uuid,\n                                'id': baseProduct.id,\n                                'reservation_id': updateDetails.reservationId,\n                                'img_path': baseProduct.img_path,\n                                'breeder_id': baseProduct.breeder_id,\n                                'farm_province': baseProduct.farm_province,\n                                'name': baseProduct.name,\n                                'type': baseProduct.type,\n                                'age': baseProduct.age,\n                                'breed': baseProduct.breed,\n                                'quantity': updateDetails.quantity,\n                                'adg': baseProduct.adg,\n                                'fcr': baseProduct.fcr,\n                                'bft': baseProduct.bft,\n                                'status': 'reserved',\n                                'status_time': updateDetails.statusTime,\n                                'customer_id': updateDetails.customerId,\n                                'customer_name': updateDetails.customerName,\n                                'date_needed': updateDetails.dateNeeded,\n                                'special_request': updateDetails.specialRequest\n                            }\n                        );\n\n                        // If after reservation, the product has been put to status 'displayed'\n                        // due to zero customers requesting it the parent product\n                        // display should be removed in the UI component\n                        if(updateDetails.removeParentProductDisplay) this.products.splice(index,1);\n                    }\n\n                    break;\n\n                case 'on_delivery':\n                    var index = updateDetails.index;\n                    this.products[index].status = 'on_delivery';\n                    this.products[index].status_time = updateDetails.statusTime;\n                    this.products[index].delivery_date = updateDetails.deliveryDate;\n\n                    break;\n\n                case 'sold':\n                    var index = updateDetails.index;\n                    this.products[index].status = 'sold';\n                    this.products[index].status_time = updateDetails.statusTime;\n\n                    break;\n\n                case 'cancel_transaction':\n                    // Remove from products\n                    this.products.splice(updateDetails.index,1);\n\n                    break;\n\n                default: break;\n            }\n        }\n    },\n    created: function(){\n        // If parameters are found parse it for the statusFilter data\n        if(location.search){\n            var status = location.search.slice(1).split('=');\n            this.statusFilter = status[1];\n        }\n    },\n    mounted: function(){\n        var self = this;\n\n        // Determine if connection to websocket server must\n        // be secure depending on the protocol\n        var pubsubServer = (location.protocol === 'https:') ? config.pubsubWSSServer : config.pubsubWSServer;\n\n        // Set-up configuration and subscribe to a topic in the pubsub server\n        var onConnectCallback = function(session){\n\n            session.subscribe(self.topic, function(topic, data) {\n                // Update notificationCount and prompt a toast\n                data = JSON.parse(data);\n                if(data.type === 'db-productRequest'){\n                    var index = self.searchProduct(data.body.id);\n\n                    // Add another entry in the table if no current entry yet for the product\n                    if(self.products[index] === undefined || self.products[index].status !== 'requested'){\n                        self.products.unshift(data.body);\n                    }\n                }\n\n                // Update some DOM elements\n                self.$nextTick(function(){\n                    $('.tooltipped').tooltip({delay:50});\n                });\n            });\n        };\n\n        var onHangupCallback = function(code, reason, detail){\n            console.warn('WebSocket connection closed');\n            console.warn(code+': '+reason);\n        };\n\n        var conn = new ab.connect(\n            pubsubServer,\n            onConnectCallback,\n            onHangupCallback,\n            {\n                'maxRetries': 30,\n                'retryDelay': 2000,\n                'skipSubprotocolCheck': true\n            }\n        );\n    }\n});\n"]}