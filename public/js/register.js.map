{"version":3,"sources":["formValidationMethods.js","registration_validation.js"],"names":[],"mappingsfile":"register.js","sourcesContent":["'use strict';\n\n// Place error on specific HTML input\nvar placeError = function(inputElement, errorMsg){\n    // Parse id of element if it contains '-' for the special\n    // case of finding the input's respective\n    // label on editProfile pages\n    var inputId = (inputElement.id.includes('-') && /\\d/.test(inputElement.id))\n        ? (inputElement.id.split('-')[2])\n        : inputElement.id;\n\n    $(inputElement)\n        .parents(\"form\")\n        .find(\"label[for='\" + inputId + \"']\")\n        .attr('data-error', errorMsg);\n\n    setTimeout(function(){\n        if(inputElement.id.includes('select')){\n            // For select input, find first its respective input text\n            // then add the 'invalid' class\n            $(inputElement)\n                .parents('.select-wrapper')\n                .find('input.select-dropdown')\n                .addClass('invalid');\n        }\n        else $(inputElement).addClass('invalid');\n    },0);\n};\n\n// Place success from specific HTML input\nvar placeSuccess = function(inputElement){\n\n    // For select input, find first its respective input text\n    // then add the needed classes\n    var inputTextFromSelect = (inputElement.id.includes('select')) ? $(inputElement).parents('.select-wrapper').find('input.select-dropdown') : '';\n\n    // Check first if it is invalid\n    if($(inputElement).hasClass('invalid') || $(inputTextFromSelect).hasClass('invalid')){\n        $(inputElement)\n            .parents(\"form\")\n            .find(\"label[for='\" + inputElement.id + \"']\")\n            .attr('data-error', false);\n\n        setTimeout(function(){\n            if(inputElement.id.includes('select')) inputTextFromSelect.removeClass('invalid').addClass('valid');\n            else $(inputElement).removeClass('invalid').addClass('valid');\n        },0);\n    }\n    else {\n        if(inputElement.id.includes('select')) inputTextFromSelect.addClass('valid');\n        else $(inputElement).addClass('valid');\n    }\n}\n\nvar validationMethods = {\n    // functions must return either true or the errorMsg only\n    required: function(inputElement){\n        var errorMsg = 'This field is required';\n        return inputElement.value ? true : errorMsg;\n    },\n    requiredIfRadio: function(inputElement, radioId){\n        var errorMsg = 'This field is required';\n        var radioInputElement = document.getElementById(radioId);\n        if(radioInputElement.checked) return inputElement.value ? true : errorMsg;\n        else return true;\n    },\n    requiredDropdown: function(inputElement){\n        var errorMsg = 'This field is required';\n        return inputElement.value ? true : errorMsg;\n    },\n    email: function(inputElement){\n        var errorMsg = 'Please enter a valid email address';\n        return /\\S+@\\S+\\.\\S+/.test(inputElement.value) ? true : errorMsg;\n    },\n    minLength: function(inputElement, min){\n        var errorMsg = 'Please enter ' + min + ' or more characters';\n        return (inputElement.value.length >= min) ? true : errorMsg;\n    },\n    equalTo: function(inputElement, compareInputElementId){\n        var errorMsg = 'Please enter the same value';\n        var compareInputElement = document.getElementById(compareInputElementId);\n        return (inputElement.value === compareInputElement.value) ? true : errorMsg;\n    },\n    zipCodePh: function(inputElement){\n        var errorMsg = 'Please enter zipcode of 4 number characters';\n        return (/\\d{4}/.test(inputElement.value) && inputElement.value.length === 4) ? true : errorMsg;\n    },\n    phoneNumber: function(inputElement){\n        var errorMsg = 'Please enter 11-digit phone number starting with 09';\n        return (/^09\\d{9}/.test(inputElement.value) && inputElement.value.length === 11)  ? true : errorMsg;\n    }\n\n};\n","'use strict';\n\nvar validateFunction = function(){\n\n    return function(){\n        var validateInput = function(inputElement){\n            // Initialize needed validations\n            var validations = {\n                name: ['required'],\n                email: ['required', 'email'],\n                password: ['required', 'minLength:8'],\n                password_confirmation: ['required', 'equalTo:password']\n            };\n\n            // Check if validation rules exist\n            if(validations[inputElement.id]){\n                var result = true;\n\n                for (var i = 0; i < validations[inputElement.id].length; i++) {\n                    var element = validations[inputElement.id][i];\n\n                    // Split arguments if there are any\n                    var method = element.includes(':') ? element.split(':') : element;\n\n                    result = (typeof(method) === 'object')\n                        ? (validationMethods[method[0]](inputElement, method[1]))\n                        : (validationMethods[method](inputElement));\n\n                    // Result would return to a string errorMsg if validation fails\n                    if(result !== true){\n                        placeError(inputElement, result);\n                        return false;\n                    }\n                }\n\n                // If all validations succeed then\n                if(result === true){\n                    placeSuccess(inputElement);\n                    return true;\n                }\n            }\n        };\n\n        // Focusout events\n        $(\"input\").focusout(function(e){\n            e.preventDefault();\n\n            validateInput(this);\n        });\n\n        // OnKeypressUp events\n        $(\"input\").keyup(function(e){\n            if($(this).hasClass('invalid') || $(this).hasClass('valid')) validateInput(this);\n        })\n\n        $(\"button[type='submit']\").click(function(e){\n            e.preventDefault();\n\n            var validName = validateInput(document.getElementById('name'));\n            var validEmail = validateInput(document.getElementById('email'));\n            var validPassword = validateInput(document.getElementById('password'));\n            var validPasswordConfirmation = validateInput(document.getElementById('password_confirmation'));\n\n            if(validName && validEmail && validPassword && validPasswordConfirmation){\n                $(this).addClass('disabled');\n                $(this).parents('form').submit();\n            }\n        })\n    }\n};\n\n$(document).ready(validateFunction());\n"]}